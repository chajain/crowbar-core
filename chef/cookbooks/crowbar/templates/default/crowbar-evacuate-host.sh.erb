#!/bin/bash
#
# This script has to be run from nova controller node.
# It takes name of compute node as an argument and live-migrates all running instancess
# from this compute node.

LOGFILE=/var/log/crowbar/node-upgrade.log
UPGRADEDIR=/var/lib/crowbar/upgrade
mkdir -p "`dirname "$LOGFILE"`"
exec >>"$LOGFILE" 2>&1

log()
{
    set +x
    echo "[$(date --iso-8601=ns)] [$$] $@"
    set -x
}

log "Executing $BASH_SOURCE"

host=$1

if [ "$host" = "" ]; then
    log "No argument was given! Exiting..."
    echo 1 > $UPGRADEDIR/crowbar-evacuate-host-failed
    exit 1
fi

mkdir -p $UPGRADEDIR

set +x
source /root/.openrc
set -x

openstack --insecure compute service set --disable "$host" nova-compute

# Initial check if there's anything running on a host
if ! nova --insecure list --all-tenants --host "$host" --fields host,status 2>/dev/null | grep -e ACTIVE -e MIGRATING | grep "$host"; then
    touch $UPGRADEDIR/crowbar-evacuate-host-ok
    log "No running VM's found on $host, exiting now."
    log "$BASH_SOURCE is finished."
    exit 0
fi

<% if @needs_block_migrate %>
blockmigrate="--block-migrate"
<% else %>
blockmigrate=""
<% end %>

ORIGINAL_INSTANCES=$UPGRADEDIR/original_instances

# List active instances on host before the live-migration starts
openstack server list --insecure --all-projects --status active --host $host -f value -c ID > $ORIGINAL_INSTANCES

i=0
while [[ $i -lt 10 ]] && openstack --insecure compute service list --service nova-compute -f value -c State | grep down ; do
    log "Some nova-compute service is still down..."
    # Find out hosts where nova-compute is down
    hosts=$(openstack --insecure compute service list --service nova-compute -f value -c Host -c State | grep down | cut -f 1 -d " ")
    some_host_is_up=0
    for host_down in $hosts; do
        # Check if hypervisor is down as well
        if [ $(openstack --insecure hypervisor list --matching $host_down -f value -c State) = "up" ] ; then
            some_host_is_up=1
            break
        fi
    done
    # Ignore cases where also the hosts (not just services) are down 
    if [ "$some_host_is_up" = 0 ]; then
        log "It appears that hypervisors are down as well."
        break
    fi
    sleep 6
    i=$(($i + 1))
    # Give up after last cycle
    if [[ $i -eq 10 ]]; then
        log "Some nova-compute service is still down. Check the state of compute nodes before proceeding with the live-migration."
        echo 4 > $UPGRADEDIR/crowbar-evacuate-host-failed
        exit 4
    fi
done

if ! nova --insecure host-evacuate-live "$host" $blockmigrate; then
    log "Live migration of instances from host $host has failed!"
    echo 2 > $UPGRADEDIR/crowbar-evacuate-host-failed
    exit 2
fi

while nova --insecure list --all-tenants --host "$host" --fields host,status 2>/dev/null | grep -e ACTIVE -e MIGRATING | grep "$host"; do
    log "There is still some VM running at $host..."
    sleep 10
done

# check the potential error state of instances that were running before
failing=$(openstack server list --insecure --all-projects --status error --host $host -f value -c ID)

for i in $failing; do
    if grep $i $ORIGINAL_INSTANCES ; then
        log "Error detected during live-migration at $host..."
        echo 3 > $UPGRADEDIR/crowbar-evacuate-host-failed
        exit 3
    fi
done

touch $UPGRADEDIR/crowbar-evacuate-host-ok
log "$BASH_SOURCE is finished."
